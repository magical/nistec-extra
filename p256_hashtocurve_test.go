//go:build purego || (!amd64 && !arm64 && !(ppc64le && go1.19) && !s390x)

package nistec_test

import (
	"fmt"
	"testing"

	"filippo.io/nistec"
)

func TestMapToCurve(t *testing.T) {
	ubytes := []byte{0xad, 0x53, 0x42, 0xc6, 0x6a, 0x6d, 0xd0, 0xff, 0x08, 0x0d, 0xf1, 0xda, 0x0e, 0xa1, 0xc0, 0x4b, 0x96, 0xe0, 0x33, 0x0d, 0xd8, 0x94, 0x06, 0x46, 0x5e, 0xeb, 0xa1, 0x15, 0x82, 0x51, 0x50, 0x09}
	//ubytes = []byte{0x8c, 0x0f, 0x1d, 0x43, 0x20, 0x4b, 0xd6, 0xf6, 0xea, 0x70, 0xae, 0x80, 0x13, 0x07, 0x0a, 0x15, 0x18, 0xb4, 0x38, 0x73, 0xbc, 0xd8, 0x50, 0xaa, 0xfa, 0x0a, 0x9e, 0x22, 0x0e, 0x2e, 0xea, 0x5a}
	p, err := nistec.P256MapToCurve(ubytes)
	if err != nil {
		t.Errorf("unexpected error: %v", err)
		return
	}
	wantX := "ab640a12220d3ff283510ff3f4b1953d09fad35795140b1c5d64f313967934d5"
	wantY := "dccb558863804a881d4fff3455716c836cef230e5209594ddd33d85c565b19b1"
	x, y := nistec.GetX(p), nistec.GetY(p)
	if fmt.Sprintf("%x", x) != wantX {
		t.Errorf("x = %x, want %s", x, wantX)
	}
	if fmt.Sprintf("%x", y) != wantY {
		t.Errorf("x = %x, want %s", x, wantY)
	}
}
